//
// nekRS User Defined File
//
#include <limits.h>
#include <string.h>
#include <stdio.h>
#include <math.h>
#include "udf.hpp"
#include "plugins/particle.hpp"

#define OUT_CHUNK_SIZE 10000 /* chunk size for outputing particles */
#define USE_MPIIO      1

dfloat xl = -0.5;
dfloat xh = 0.5;
dfloat yl = -0.5;
dfloat yh = 0.5;
dfloat zl = 0.0;
dfloat zh = 1.0;
dfloat rh = 0.5;
dfloat rho_p, rho_f, nu_f, dia_p;
dfloat phi_p, phi_f;
dfloat constant; 

static occa::kernel fillFUKernel; 

// Helper class for case specific data
struct extra_particle_data {
  dfloat x_hist[3][3];       // position history
  dfloat v_hist[3][3];       // velocity history
  dfloat u_hist[3][3];       // fluid velocity history
  dfloat Re_p[3];            // Reynolds number history
  hlong  id;                 // id
  dfloat color;     
  dfloat temp;               // temperature
  dfloat lam;                // lambda2
  dfloat moist;              // moisture
  dfloat dia;                // diameter

  extra_particle_data()
  {
  }

  extra_particle_data(dfloat x_hist_[3][3], dfloat v_hist_[3][3], dfloat u_hist_[3][3],
                      dfloat Re_p_[3], dfloat color_, hlong id_, dfloat temp_,
                      dfloat lam_, dfloat moist_, dfloat dia_)
  {
    for (int i = 0; i < 3; ++i) {
      for (int j = 0; j < 3; ++j) {
        x_hist[i][j] = x_hist_[i][j];
        v_hist[i][j] = v_hist_[i][j];
        u_hist[i][j] = u_hist_[i][j];
      }
      Re_p[i] = Re_p_[i];
    }

    id = id_;
    color = color_;
    temp = temp_;
    lam = lam_;
    moist = moist_;
    dia = dia_;
  }
};

typedef particle_set<extra_particle_data> particles_t;

void particleInit(particles_t& particles) {

  static hlong gcount = 0; // total # particles emitted

  int mpi_rank = platform_t::getInstance()->comm.mpiRank;
  int mpi_size = platform_t::getInstance()->comm.mpiCommSize;

  dlong TotPart = 100;
  TotPart = 1000;
  srand (static_cast <unsigned> (time(0)));

  for (int part = 0; part < TotPart; ++part) {
    dfloat r = ((double)rand() / (double)(RAND_MAX/(rh)));
    dfloat theta = ((double)rand() / (double)(RAND_MAX/(2.0*M_PI)));
    dfloat xp = r*cos(theta);
    dfloat yp = r*sin(theta);

//    dfloat xp = xl + ((double)rand() / (double)(RAND_MAX/(xh-xl)));
//    dfloat yp = yl + ((double)rand() / (double)(RAND_MAX/(yh-yl)));
    dfloat zp = 0.01;
    if (gcount%mpi_size == mpi_rank) { // Distribute particles in a round robin fashion
      particles_t::particle_t particle;

      particle.x[0] = xp;
      particle.x[1] = yp;
      particle.x[2] = zp;
      particle.extra.id = gcount;
      for (int d = 0; d < 3; ++d) {
        particle.extra.x_hist[d][0] = xp;
        particle.extra.x_hist[d][1] = yp;
        particle.extra.x_hist[d][2] = zp;
        particle.extra.v_hist[d][0] = 0.0;
        particle.extra.v_hist[d][1] = 0.0;
        particle.extra.v_hist[d][2] = 0.0;
        particle.extra.u_hist[d][0] = 0.0;
        particle.extra.u_hist[d][1] = 0.0;
        particle.extra.u_hist[d][2] = 0.0;
        particle.extra.Re_p[0] = 0.0;
        particle.extra.Re_p[1] = 0.0;
        particle.extra.Re_p[2] = 0.0;
          
      }
      particle.extra.color = gcount;  // color by id
      particle.extra.temp = 0.0;
      particle.extra.lam = 0.01;      // make 0.0
      particle.extra.moist = 0.02;    // make 0.0
      particle.extra.dia = 0.03;      // make 0.0
      particles.push(particle);
    }
    ++gcount;
  }
}

void particleUpdate(particles_t& particles, nrs_t* nrs, int tstep) {

  particles.find();
  particles.migrate();

  dfloat *v1[3];
  v1[0] = new dfloat[3*particles.size()];
  v1[1] = v1[0] + particles.size();
  v1[2] = v1[1] + particles.size();

  dfloat *u1[3];
  u1[0] = new dfloat[3*particles.size()];
  u1[1] = u1[0] + particles.size();
  u1[2] = u1[1] + particles.size();
  occa::memory o_U = nrs->o_U.cast(occa::dtype::get<dfloat>());
  particles.interpLocal(o_U, u1, 3);

  dfloat *s0[1];
  s0[0] = new dfloat[particles.size()];
  occa::memory o_S0 = (nrs->cds->o_S + nrs->cds->fieldOffsetScan[0] * sizeof(dfloat)).cast(occa::dtype::get<dfloat>());
//  occa::memory o_S = nrs->cds->o_S.cast(occa::dtype::get<dfloat>());
  particles.interpLocal(o_S0, s0, 1);

  dfloat *s1[1];
  s1[0] = new dfloat[particles.size()];
  occa::memory o_S1 = (nrs->cds->o_S + nrs->cds->fieldOffsetScan[1] * sizeof(dfloat)).cast(occa::dtype::get<dfloat>());
  particles.interpLocal(o_S1, s1, 1);

  dfloat *s2[1];
  s2[0] = new dfloat[particles.size()];
  occa::memory o_S2 = (nrs->cds->o_S + nrs->cds->fieldOffsetScan[2] * sizeof(dfloat)).cast(occa::dtype::get<dfloat>());
  particles.interpLocal(o_S2, s2, 1);

  dfloat *s3[1];
  s3[0] = new dfloat[particles.size()];
  occa::memory o_S3 = (nrs->cds->o_S + nrs->cds->fieldOffsetScan[3] * sizeof(dfloat)).cast(occa::dtype::get<dfloat>());
  particles.interpLocal(o_S3, s3, 1);

  double c1, c2, c3, dt = nrs->dt[0];
  if (tstep == 0) { // AB1
    c1 = 1.0;
    c2 = 0.0;
    c3 = 0.0;
  } else if (tstep == 1) { // AB2
    c1 =  3.0 / 2.0;
    c2 = -1.0 / 2.0;
    c3 =  0.0 / 2.0;
  } else { // AB3
    c1 =  23.0 / 12.0;
    c2 = -16.0 / 12.0;
    c3 =   5.0 / 12.0;
  }

  double b0, b1, b2, b3, g1, g2, g3; // dt = nrs->dt[0];
  if (tstep == 0) { // BDF1/EXT1
    b0 = 1.0; b1 = -1.0; b2 = 0.0; b3 = 0.0;
    g1 = 1.0; g2 = 0.0;  g3 = 0.0;
  } else if (tstep == 1) { // BDF2/EXT2
    b0 = 3.0/2.0; b1 = -2.0; b2 = 1.0/2.0; b3 = 0.0;
    g1 = 2.0; g2 = -1.0;  g3 = 0.0;
  } else { // BDF3/EXT3
    b0 = 11.0/6.0; b1 = -3.0; b2 = 3.0/2.0; b3 = -1.0/3.0;
    g1 = 3.0; g2 = -3.0;  g3 = 1.0;
  }

  phi_p - 0.0;
  phi_f = 1.0 - phi_p;
  dfloat constant2 = constant * pow(phi_f,-2.65);
  dfloat ux[3];

  for (int i = 0; i < particles.size(); ++i) {
    ux[0] = particles.extra[i].u_hist[0][0] - particles.extra[i].v_hist[0][0];
    ux[1] = particles.extra[i].u_hist[0][1] - particles.extra[i].v_hist[0][1];
    ux[2] = particles.extra[i].u_hist[0][2] - particles.extra[i].v_hist[0][2];
    dfloat mod_u = sqrt(ux[0]*ux[0] + ux[1]*ux[1] + ux[2]*ux[2]);
    
    particles.extra[i].Re_p[2] = particles.extra[i].Re_p[1];
    particles.extra[i].Re_p[1] = particles.extra[i].Re_p[0];
    particles.extra[i].Re_p[0] = phi_f*mod_u*dia_p/nu_f;

    dfloat l1 = constant2*(1.0 + 0.15*pow(particles.extra[i].Re_p[0],0.687));
    dfloat l2 = constant2*(1.0 + 0.15*pow(particles.extra[i].Re_p[1],0.687));
    dfloat l3 = constant2*(1.0 + 0.15*pow(particles.extra[i].Re_p[2],0.687));

    // Update particle position and velocity history  
    for (int k=0; k < 3; ++k) {
       
//       v1[k][i] = particles.extra[i].v_hist[0][k] + 
//                  dt*(1.0*l1*(particles.extra[i].u_hist[0][k] - particles.extra[i].v_hist[0][k])
//                     +(-0.0)*l2*(particles.extra[i].u_hist[1][k] - particles.extra[i].v_hist[1][k]) );

/*
       v1[k][i] = particles.extra[i].v_hist[0][k] + 
                  dt*(c1*l1*(particles.extra[i].u_hist[0][k] - particles.extra[i].v_hist[0][k])
                     +c2*l2*(particles.extra[i].u_hist[1][k] - particles.extra[i].v_hist[1][k])
                     +c3*l3*(particles.extra[i].u_hist[2][k] - particles.extra[i].v_hist[2][k]));
     
       particles.x[k][i] += dt*(c1*v1[k][i] + c2*particles.extra[i].v_hist[0][k] + c3*particles.extra[i].v_hist[1][k]);

*/
       v1[k][i] = -1.0/b0*((b1*particles.extra[i].v_hist[0][k] + b2*particles.extra[i].v_hist[1][k] + b3*particles.extra[i].v_hist[2][k]) - 
                  dt*(g1*l1*(particles.extra[i].u_hist[0][k] - particles.extra[i].v_hist[0][k])
                     +g2*l2*(particles.extra[i].u_hist[1][k] - particles.extra[i].v_hist[1][k])
                     +g3*l3*(particles.extra[i].u_hist[2][k] - particles.extra[i].v_hist[2][k])));
       
       particles.x[k][i] = -1.0/b0*((b1*particles.extra[i].x_hist[0][k] + b2*particles.extra[i].x_hist[1][k] + b3*particles.extra[i].x_hist[2][k]) -
                           dt*(g1*v1[k][i] + g2*particles.extra[i].v_hist[0][k] + g3*particles.extra[i].v_hist[1][k]));

       particles.extra[i].x_hist[2][k] = particles.extra[i].x_hist[1][k];
       particles.extra[i].x_hist[1][k] = particles.extra[i].x_hist[0][k];
       particles.extra[i].x_hist[0][k] = particles.x[k][i];
       particles.extra[i].v_hist[2][k] = particles.extra[i].v_hist[1][k];
       particles.extra[i].v_hist[1][k] = particles.extra[i].v_hist[0][k];
       particles.extra[i].v_hist[0][k] = v1[k][i];
       particles.extra[i].u_hist[2][k] = particles.extra[i].u_hist[1][k];
       particles.extra[i].u_hist[1][k] = particles.extra[i].u_hist[0][k];
       particles.extra[i].u_hist[0][k] = u1[k][i];
    }
    particles.extra[i].temp = s0[0][i];
    particles.extra[i].lam  = s1[0][i];
    particles.extra[i].moist= s2[0][i];
    particles.extra[i].dia  = s3[0][i];

    // Remove particles that have left the region
    dfloat RadPart2 = particles.x[0][i]*particles.x[0][i] + particles.x[1][i]*particles.x[1][i];
    if (RadPart2 > rh*rh ||
        particles.x[2][i] > zh || particles.x[2][i] < zl ) {
      particles.remove(i);
      --i; // cancel out the for loop increment
    }
  }

  delete[] v1[0];
  delete[] u1[0];
  delete[] s0[0];
  delete[] s1[0];
  delete[] s2[0];
  delete[] s3[0];
}

void particleOut(particles_t& particles)
{
  static dfloat x_temp[USE_MPIIO?0:OUT_CHUNK_SIZE][7];
  static dfloat x_root[USE_MPIIO?0:OUT_CHUNK_SIZE][7];

  static int out_step = 0;
  ++out_step;

  MPI_Comm mpi_comm = platform_t::getInstance()->comm.mpiComm;
  int mpi_rank = platform_t::getInstance()->comm.mpiRank;
  int mpi_size = platform_t::getInstance()->comm.mpiCommSize;
  dlong npart = particles.size();

  char fname[128];
  sprintf(fname, "part%05d.okc", out_step);

  if (USE_MPIIO) {
    constexpr hlong p_size = 18*10;

    hlong p_offset = npart;
    hlong p_header = 112;
    MPI_Exscan(MPI_IN_PLACE, &p_offset, 1, MPI_HLONG, MPI_SUM, mpi_comm);
    hlong file_offset = p_offset*p_size+p_header;

    MPI_File file_out;
    MPI_File_open(mpi_comm, fname, MPI_MODE_CREATE|MPI_MODE_WRONLY, MPI_INFO_NULL, &file_out);
    if(mpi_rank == 0) {
//      MPI_File_write(file_out, "X Y Z Color U V W\n", 18, MPI_CHAR, MPI_STATUS_IGNORE);
      MPI_File_write(file_out, "10 1000 12\nx\ny\nz\nu\nv\nw\ntemp\nlam\nmoist\ndia\n0 0 10\n0 0 10\n0 0 10\n0 0 10\n0 0 10\n0 0 10\n0 0 10\n0 0 10\n0 0 10\n0 0 10\n", p_header, MPI_CHAR, MPI_STATUS_IGNORE);
    } else {
      MPI_File_seek(file_out, file_offset, MPI_SEEK_SET);
    }

    char *char_buffer = new char[npart*p_size + 1];
    for (dlong ii = 0; ii < npart; ++ii) {
      sprintf(char_buffer+ii*p_size, "%17.9e %17.9e %17.9e %17.9e %17.9e %17.9e %17.9e %17.9e %17.9e %17.9e\n",
              particles.x[0][ii], particles.x[1][ii], particles.x[2][ii],
              particles.extra[ii].v_hist[0][0], particles.extra[ii].v_hist[0][1], particles.extra[ii].v_hist[0][2],
              particles.extra[ii].temp, particles.extra[ii].temp, particles.extra[ii].moist, particles.extra[ii].dia);
    }
    MPI_File_write_all(file_out, char_buffer, p_size*npart, MPI_CHAR, MPI_STATUS_IGNORE);
    delete [] char_buffer;

    MPI_File_close(&file_out);
  } else {
    std::FILE *file_out;
    if (mpi_rank == 0) {
      file_out = fopen(fname, "w+");
      fprintf(file_out, "X Y Z Color U V W\n");
    }
    hlong l_min = INT_MAX, l_max = INT_MIN, min_points, max_points;
    for (int i = 0; i < npart; ++i) {
      hlong id = particles.extra[i].id;
      if (l_min > id) {
        l_min = id;
      }
      if (l_max < id) {
        l_max = id;
      }
    }
    MPI_Allreduce(&l_min, &min_points, 1, MPI_HLONG, MPI_MIN, mpi_comm);
    MPI_Allreduce(&l_max, &max_points, 1, MPI_HLONG, MPI_MAX, mpi_comm);

    hlong n_active = max_points - min_points + 1;
    dlong npass = n_active / OUT_CHUNK_SIZE;
    if (n_active > npass*OUT_CHUNK_SIZE) ++npass;
    hlong ilast=min_points;

    for (int ipass = 0; ipass < npass; ++ipass) {
      dlong mpart = (dlong)std::min((hlong)OUT_CHUNK_SIZE, max_points - ilast+1);
      hlong i0 = ilast;
      hlong i1 = i0 + mpart;
      ilast = i1;

      memset(&x_temp[0][0], 0, mpart*7*sizeof(dfloat));
      for (int ii=0; ii < npart; ++ii) {
        hlong id = particles.extra[ii].id;
        if (i0 <= id && id < i1) {
          int i = id-i0;
          for (int j = 0; j < 3; ++j) {
            x_temp[i][j] = particles.x[j][ii];       // coordinates
          }
          x_temp[i][3] = particles.extra[ii].color;  // color
          for (int j = 4; j < 7; ++j) {
            x_temp[i][j] = particles.extra[ii].v_hist[0][j-4];       // velocity
          }
        }
      }

      MPI_Reduce(&x_temp[0][0], &x_root[0][0], mpart*7, MPI_DFLOAT, MPI_SUM, 0, mpi_comm);
      if (mpi_rank == 0) {
        for (int i = 0; i < mpart; ++i) {
          fprintf(file_out, " %17.9e %17.9e %17.9e %17.9e %17.9e %17.9e %17.9e\n",
                  x_root[i][0], x_root[i][1], x_root[i][2], x_root[i][3],
                  x_root[i][4], x_root[i][5], x_root[i][6]);
        }
      }
    }
    if (mpi_rank == 0) fclose(file_out);
  }
}

particles_t *particle_data;

void particleStep(nrs_t *nrs, dfloat time, int tstep)
{
  // adjust to control when particles are generated
  bool ifInit;
  static dfloat last_new_time = 0.0;    // |
//ifInit = time - last_new_time >= 0.5; // | every 0.5 seconds
//if(ifInit) last_new_time = time;      // |
//ifInit = tstep % 100 == 0;            // every 100 iterations
//ifInit = nrs->isOutputStep;           // on the output steps
  ifInit = tstep == 0;                  // only once at the begining

  // Only output particles on output steps to ensure particles match the field files
  bool ifOut = nrs->isOutputStep;
  //  bool ifOut = (tstep % 100 == 0);

  if (ifInit) particleInit  (*particle_data);
              particleUpdate(*particle_data, nrs, tstep);
  if (ifOut)  particleOut   (*particle_data);
}


void userf(nrs_t *nrs, dfloat time, occa::memory o_U, occa::memory o_FU)
{
  mesh_t* mesh = nrs->meshV;
  fillFUKernel(mesh->Nlocal, nrs->fieldOffset, nrs->cds->o_S, nrs->o_FU);
}

void UDF_LoadKernels(occa::properties& kernelInfo)
{
  fillFUKernel = udfBuildKernel(kernelInfo, "fillFU");
}

void UDF_Setup(nrs_t *nrs)
{
  // assign function pointer to drive flow by constant mean pressure gradient
  udf.uEqnSource = &userf;

  particle_data = new particles_t(nrs, 0);

  rho_p = 1.0;
  rho_f = 1.0;
  nu_f  = sqrt(7/1e8); 
  dia_p = 0.015;
  constant = 18.0*nu_f*rho_f/(dia_p*dia_p*rho_p);
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
  if (nrs->isOutputStep) {
    nek::ocopyToNek(time, tstep);
    nek::userchk();
  }
  particleStep(nrs, time, tstep);
}
